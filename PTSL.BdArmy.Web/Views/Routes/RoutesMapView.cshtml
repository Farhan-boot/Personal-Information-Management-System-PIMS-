@{
    ViewBag.Title = "Create";
    var Message = ViewBag.Message;
}

<style>
    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }
</style>
<div class="card">
    <div class="card-header">
        <h4>Monitor User</h4>
    </div>

    <div class="card-body">

        <div class="col-md-8" style="float:left;">

            @*<input id="pac-input"
                class="controls"
                type="text"
                placeholder="Search Box" />*@
            <div id="googleMap" style="width:100%;height:500px"></div>

        </div>
        <div class="col-md-4" style="float:left;">
            <div class="col-md-12" style="float:left">
                <div class="row">
                    <div class="col">
                        <label for="inputDistrict">User Name: <b>@ViewBag.UserName</b></label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label for="inputDistrict">Schedule Name: <b>@ViewBag.SessionName</b></label>
                    </div>
                </div>
                <hr />
                @if (ViewBag.DetailsData != null)
                {
                    foreach (var data in ViewBag.DetailsData)
                    {
                        @*<div class="row">
                                <div class="col">
                                    <label for="inputDistrict" style="background: #f4ff97 !important">@data.PlaceName  , @data.StartDate To @data.EndDate</label>
                                </div>
                            </div>*@
                        <div class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="customCheck_@data.Id" @(data.IsArrived == true ? "checked='true'" : "")>
                            <label class="custom-control-label" for="customCheck_@data.Id">@data.PlaceName  , @data.StartDate To @data.EndDate</label>
                        </div>
                    }
                }
                <table class="table table-striped table-bordered table-hover" id="routeTable" style="width:100%;border:1px solid;display:none;">
                    <thead style="border:1px solid">
                        <tr>

                            <th>Place Name</th>
                            <th>Latitude</th>
                            <th>Longitude</th>
                            <th>From Time</th>
                            <th>To Time</th>
                            <th>Position</th>
                        </tr>
                    </thead>

                    <tbody>
                    </tbody>
                </table>
            </div>

        </div>


    </div>
    <hr />

    <div class="card-header pull-left">
        <a href="/Routes/Index" class="btn btn-warning">Return to Index</a>
    </div>
</div>
<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

@*<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBPVgPRfL3SoIscOmdQM9lrH4DiJh5GOss&callback=initMap&libraries=places&v=weekly&channel=2"
    async></script>*@


<script>
    var myKey = "AIzaSyBPVgPRfL3SoIscOmdQM9lrH4DiJh5GOss";
    function loadScript() {
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyBPVgPRfL3SoIscOmdQM9lrH4DiJh5GOss&callback=initMap&libraries=places&v=weekly&channel=2";
        document.body.appendChild(script);
    }
    const Places = [
        //["Bondi PlacesData", 23.7515, 90.39326],
        //["Coogee PlacesData", 23.7581, 90.38998],
        //["Cronulla PlacesData", 23.77563, 90.38988],
        //["Manly PlacesData", 23.77939, 90.40627]
    ];

    $(document).ready(function () {

       var routesDetails = @Html.Raw(Json.Encode(@ViewBag.DetailsData));

        @{
            var html = "";
            int step = ViewBag.RowCount == null ? 0 : ViewBag.RowCount;
            int totalCount = ViewBag.RowCount == null ? 0 : ViewBag.RowCount;
            foreach (var value in ViewBag.DetailsData)
            {
                var PositionName = "Step " + step;
                 if (step == 1)
                {
                    PositionName = "Start Position";
                }

                if (step == totalCount)
                {
                    PositionName = "End Position";
                }


                //var myDate = new Date(parseInt('@Html.Raw(Json.Encode(@Model.RoutesDetails.FirstOrDefault().StartDate))'.replace('/Date(', '')));
                html += "<tr>" +
                "<td>" + value.PlaceName + "</td>" +
                "<td>" + value.Latitude + "</td>" +
                "<td>" + value.Longitude + "</td>" +
                "<td>" + value.StartDate + "</td>" +
                "<td>" + value.EndDate + "</td>" +
                "<td>" + PositionName + "</td>" +
                "</tr>";
                step--;
            }
    }



        $("#routeTable tbody").append(@Html.Raw(Json.Encode(@html)));
        var count = 1;
        $('#routeTable > tbody  > tr').each(function () { //loop in table list
            var tempPlaces = {};
            tempPlaces.Name = this.cells[0].innerHTML;
            tempPlaces.Latitude = this.cells[1].innerHTML;
            tempPlaces.Longitude = this.cells[2].innerHTML;
            tempPlaces.From = this.cells[3].innerHTML;
            tempPlaces.To = this.cells[4].innerHTML;
            tempPlaces.Position = this.cells[5].innerHTML;
            //tempPlaces.Radious = this.cells[1].innerHTML;
            Places.push([tempPlaces.Name, parseFloat(tempPlaces.Latitude), parseFloat(tempPlaces.Longitude), tempPlaces.From, tempPlaces.To,tempPlaces.Position]);
            if (count == 1) {
                latData = this.cells[1].innerHTML;
                lngData = this.cells[2].innerHTML;
                center = { lat: parseFloat(latData), lng: parseFloat(lngData) };
            }
            count++;
        });

        loadScript();
    });


    var GeoJsonDataBody =@Html.Raw(Json.Encode(ViewBag.DamageMapJson));
    //console.log(GeoJsonDataBody);
    var allSegmentJson = jQuery.parseJSON(GeoJsonDataBody);
    //console.log(allSegmentJson);

    //Map initialize For First Time Start
    //var map;
    var customMapType;
    var jsonFiledata;


    var geocoder;
    var map;
    var marker;
    var circle;
    var latData;
    var lngData;
    var center = { lat: 23.810332, lng: 90.412518 };
    if (allSegmentJson != null) {
        var coordinates = allSegmentJson.features[0].geometry.coordinates;
        center = { lat: coordinates[0][1], lng: coordinates[0][0] };
    }
    function initMap() {
        const map = new google.maps.Map(document.getElementById("googleMap"), {
           // center: { lat: 23.810332, lng: 90.412518 },
            center:  center ,
            zoom: 12,
            mapTypeId: "roadmap",
        });

        if (allSegmentJson != null) {
            map.data.addGeoJson(allSegmentJson);
            //center = { lat: coordinates[0][1], lng: coordinates[0][0] };

            ////Start & End Point Marker Add Start
            //for (i = 0; i < allSegmentJson.features.length; i++) {

            //    var StartMarker = new google.maps.Marker({
            //        position: new google.maps.LatLng(allSegmentJson.features[i].properties.StartLatitude, allSegmentJson.features[i].properties.StartLongitude),
            //        map: map,
            //        icon: {
            //            url: "/Content/assets/img/start.png"
            //        },
            //        title: 'Start.'
            //    });
            //    var Endmarker = new google.maps.Marker({
            //        position: new google.maps.LatLng(allSegmentJson.features[i].properties.EndLatitude, allSegmentJson.features[i].properties.EndLongitude),
            //        map: map,
            //        icon: {
            //            url: "/Content/assets/img/end.png"
            //        },
            //        title: 'End.'
            //    });
            //}

        }
        map.data.setStyle({
            strokeColor: "red",
            strokeWeight: 3,
        });


        // //BdArmy figure 4 proctice start

        //const triangleCoords = [
        //    { lat: 23.7511157989502, lng: 90.3935623168945 },
        //    { lat: 23.7515754699707, lng: 90.3932342529297 },
        //    { lat: 23.7517433166504, lng: 90.3932647705078 },
        //    { lat: 23.7520313262939, lng: 90.3936309814453 },
        //    { lat: 23.7518310546875, lng: 90.3937911987305 },
        //    { lat: 23.7516231536865, lng: 90.3938522338867 },
        //    { lat: 23.7514133453369, lng: 90.3939971923828 },
        //    { lat: 23.7510242462158, lng: 90.3943557739258 }
        //];

        ////// Construct the polygon.
        //const bermudaTriangle = new google.maps.Polygon({
        //    paths: triangleCoords,
        //    strokeColor: "#FF0000",
        //    strokeOpacity: 0.8,
        //    strokeWeight: 2,
        //    fillColor: "#FF0000",
        //    fillOpacity: 0.35,
        //});
        //bermudaTriangle.setMap(map);

        //BdArmy figure 4 proctice end



        //google.maps.event.addListener(map, "click", function (e) {

        //    latLng = e.latLng;
        //    //$("#RoutesDetailsVM_Latitude").val(e.latLng.lat());
        //    //$("#RoutesDetailsVM_Longitude").val(e.latLng.lng());
        //    console.log(e.latLng.lat());
        //    console.log(e.latLng.lng());

        //    console.log("Marker");
        //    // if marker exists and has a .setMap method, hide it
        //    if (marker && marker.setMap) {
        //        marker.setMap(null);
        //        circle.setMap(null);
        //    }
        //    marker = new google.maps.Marker({
        //        position: latLng,
        //        map: map
        //    });

        //    circle = new google.maps.Circle({
        //        strokeColor: "#FF0000",
        //        strokeOpacity: 0.8,
        //        strokeWeight: 2,
        //        fillColor: "#FF0000",
        //        fillOpacity: 0.35,
        //        map,
        //        center: { lat: e.latLng.lat(), lng: e.latLng.lng() },
        //        radius: 5,
        //    });
        //   // $("#RoutesDetailsVM_Radius").val(5);
        //});


        // Create the search box and link it to the UI element.
        const input = document.getElementById("pac-input");
        const searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        // Bias the SearchBox results towards current map's viewport.
        map.addListener("bounds_changed", () => {
            searchBox.setBounds(map.getBounds());
        });
        let markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener("places_changed", () => {
            const places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }
            // Clear out the old markers.
            markers.forEach((marker) => {
                marker.setMap(null);
            });
            markers = [];
            // For each place, get the icon, name and location.
            const bounds = new google.maps.LatLngBounds();
            places.forEach((place) => {
                if (!place.geometry || !place.geometry.location) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                const icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25),
                };
                // Create a marker for each place.
                const image = {
                    url: "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png",
                    // This marker is 20 pixels wide by 32 pixels high.
                    size: new google.maps.Size(20, 32),
                    // The origin for this image is (0, 0).
                    origin: new google.maps.Point(0, 0),
                    // The anchor for this image is the base of the flagpole at (0, 32).
                    anchor: new google.maps.Point(0, 32),
                };
                markers.push(
                    new google.maps.Marker({
                        map,
                        image,
                        title: place.name,
                        position: place.geometry.location,
                    })
                );
                //console.log(place.formatted_address); //full address
                $("#RoutesDetailsVM_PlaceName").val(place.name);
                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);


        });
        setMarkers(map);
    }

    function setMarkers(map) {
        // Adds markers to the map.
        // Marker sizes are expressed as a Size of X,Y where the origin of the image
        // (0,0) is located in the top left of the image.
        // Origins, anchor positions and coordinates of the marker increase in the X
        // direction to the right and in the Y direction down.
        const image = {
            url: "/Content/assets/img/green-flag.png",//"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png",
            //url: "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png",

            // This marker is 20 pixels wide by 32 pixels high.
            size: new google.maps.Size(20, 32),
            // The origin for this image is (0, 0).
            origin: new google.maps.Point(0, 0),
            // The anchor for this image is the base of the flagpole at (0, 32).
            anchor: new google.maps.Point(0, 32),
        };
        // Shapes define the clickable region of the icon. The type defines an HTML
        // <area> element 'poly' which traces out a polygon as a series of X,Y points.
        // The final coordinate closes the poly by connecting to the first coordinate.

        //const shape = {
        //    coords: [1, 1, 1, 20, 18, 20, 18, 1],
        //    type: "poly",
        //};

        for (let i = 0; i < Places.length; i++) {

            const PlacesData = Places[i];
            console.log(PlacesData.Latitude + "--" + PlacesData.Longitude);
            new google.maps.Marker({
                position: { lat: PlacesData[1], lng: PlacesData[2] },
                map,
                icon: image,
                //shape: shape,
                //title: PlacesData[0],
                //zIndex: PlacesData[3],
            });


            const contentString =
                '<div id="content">' +
                '<div id="siteNotice">' +
                "</div>" +
                '<h1 id="firstHeading" class="firstHeading">' + PlacesData[0]+'</h1>' +
                '<div id="bodyContent">' +
                "<p><h5>Position : "+ PlacesData[5]+"</b></h5></p>" +
                 "<p><h5>Session Name: @ViewBag.SessionName</b></h5></p>" +
                "<p><h5>From : " + PlacesData[3]+"</h5></p>" +
                 "<p><h5>To : " + PlacesData[4]+"</h5></p>" +
                "</div>" +
                "</div>";
            const infowindow = new google.maps.InfoWindow({
                content: contentString,
                maxWidth: 200,
            });
            //const marker = new google.maps.Marker({
            //    position: uluru,
            //    map,
            //    title: "Uluru (Ayers Rock)",
            //});
            var infoWindow = new google.maps.InfoWindow({
                content: contentString,
            });

            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(PlacesData[1], PlacesData[2]),
                map: map,
                icon: image
                //title: contentString
            });

            google.maps.event.addListener(marker, 'click', (function (mm, tt) {
                return function () {
                    infoWindow.setContent(tt);
                    infoWindow.open(map, mm);
                }
            })(marker, contentString));
            //Marker.addListener("click", () => {
            //    infowindow.open({
            //        anchor: marker,
            //        map,
            //        shouldFocus: false,
            //    });
            //});

            console.log(PlacesData);
            circle = new google.maps.Circle({
                strokeColor: "#FF0000",
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: "#FF0000",
                fillOpacity: 0.35,
                map,
                center: { lat: PlacesData[1], lng: PlacesData[2] },
                radius: 5,
            });
            //map.fitBounds(circle.getBounds());

        }
    }

</script>